[ { "title": "[Code Basics] Library Linking", "url": "/posts/code-basics-compilation/", "categories": "Code Basics, Linux", "tags": "Linux, kernel, gcc, linking", "date": "2023-11-26 03:46:00 +0900", "snippet": "This post explains how external libraries are linked by gcc.Default gcc OptionsWe will first try to compile a simple C source file to check the default options used by gcc toolchain.// main.cint main(int argc, char *argv[]){ return 0;}$ gcc -o main main.cSuccessful completion of the above command generates a single executable file named main, which when run, exits without showing any output on the terminal.We can use the ldd command to check all the dynamic libraries linked to an executable:$ ldd main linux-vdso.so.1 (0x00007fff327f4000) libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007efc97e10000) /lib64/ld-linux-x86-64.so.2 (0x00007efc98044000)The output above shows 3 lines. The first shared object(.so) file, linux-vdso.so.1 is a vDSO file which is a library that is automatically included to facilitate system calls. This post will not deal with this .so file any further; it is enough to note that linux-vdso.so.1 will be included with every dynamically-linked executable file.The last line /lib64/ld-linux-x86-64.so.2 is the dynamic linker which is used to run dynamically-linked files.The actual dynamic library linked in main is the libc.so.6 which is located in /lib/x86_64-linux-gnu/libc.so.6 in the filesystem.It may be quite useful to venture further and find out how libc.so.6 ended up being included in the final executable file although we never specified anywhere(either in the source or gcc option) to include that file.Adding the -v option in gcc reveals more of what was actually executed:$ gcc -v -o main main.cUsing built-in specs....Since the output is quite long, we will divide the output into 3 parts.Compiler: cc1gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04) COLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-o&#39; &#39;main&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; /usr/lib/gcc/x86_64-linux-gnu/11/cc1 -quiet -v -imultiarch x86_64-linux-gnu main.c -quiet -dumpbase main.c -dumpbase-ext .c -mtune=generic -march=x86-64 -version -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection -o /tmp/ccZazD5D.sGNU C17 (Ubuntu 11.4.0-1ubuntu1~22.04) version 11.4.0 (x86_64-linux-gnu) compiled by GNU C version 11.4.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version isl-0.24-GMPGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072ignoring nonexistent directory &quot;/usr/local/include/x86_64-linux-gnu&quot;ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/11/include-fixed&quot;ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/11/../../../../x86_64-linux-gnu/include&quot;#include &quot;...&quot; search starts here:#include &amp;lt;...&amp;gt; search starts here: /usr/lib/gcc/x86_64-linux-gnu/11/include /usr/local/include /usr/include/x86_64-linux-gnu /usr/includeEnd of search list.The output of the gcc compiler cc1 is shown above. We can see that the actual path of the executable is /usr/lib/gcc/x86_64-linux-gnu/11/cc1 with many default flags that were used to compile the source file. Note also that the input file is specified as main.c, but the output as -o /tmp/ccZazD5D.s.The options or arguments we passed to gcc may not all be used by the compiler; some may be used by other programs in the toolchain as will be explained below.We can also check the default search paths that the compiler uses when we specify header files using the #include &amp;lt;...&amp;gt; format.Assembler: asCOLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-o&#39; &#39;main&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; as -v --64 -o /tmp/ccwGdyaH.o /tmp/ccZazD5D.sGNU assembler version 2.38 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.38The gcc assembler as assembles the .s assembly file into the object file /tmp/ccwGdyaH.oLinker: collect2COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/11/../../../:/lib/:/usr/lib/COLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-o&#39; &#39;main&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; &#39;-dumpdir&#39; &#39;main.&#39; /usr/lib/gcc/x86_64-linux-gnu/11/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/11/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/11/lto-wrapper -plugin-opt=-fresolution=/tmp/cci2UbDA.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o main /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. /tmp/ccwGdyaH.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.oCOLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-o&#39; &#39;main&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; &#39;-dumpdir&#39; &#39;main.&#39;This is the last step of gcc compilation, the linking step. We can see that the name of the linker executable is collect2 with various options following it. What we need to focus on are the flags -L and -l, which tell the linker where and which library functions to include in the final executable object file.-L&amp;lt;path&amp;gt; tells the linker that a library file may be located in the directory pointed by path and should search that directory. -L&amp;lt;path&amp;gt; is a shorthand form of --library-path=&amp;lt;path&amp;gt;.-l&amp;lt;lib&amp;gt; indicates the actual name of the library file, llib.so for dynamic, and llib.a for static library file. gcc is configured to look for .so dynamic library files by default; if both .so and .a exist with the same name, the .so file will be linked. -l&amp;lt;lib&amp;gt; is a shorthand form of --library=&amp;lt;lib&amp;gt;One other flag to note is the --as-needed flag which tells the linker to only include the dynamic library appearing right after it if it is needed.Going back to the output above, the dynamic libraries to be linked are the libgcc.a(from -lgcc) and libc.so(from -lc). (-lgcc_s is optional, so it may be not be linked if not needed).A simple search in the root filesystem lets us point out where exactly the dynamic library files are.libc.so is located in /lib/x86_64-linux-gnu/libc.so.6. This is also apparent from the ldd output.libgcc.a is located in /usr/lib/gcc/x86_64-linux-gnu/11/libgcc.a. It turned out that the libgcc is in fact a static library, which is the reason why libgcc did not show up in the ldd output.Do note that the directories in which the two library files reside were specified using the -L flag. We can also see that although the output from as is only /tmp/ccwGdyaH.o, it is linked with two other object files, crtendS.o and crtn.o, to produce the final exectuable file main.Compiling And Using a Custom Static LibraryCompiling And Using a Custom Dynamic Library Second source file which shows the use of external library(libquadmath), Compiling ans using static library, Compiling and using dynamic library " }, { "title": "Tomcat [4] - Authenticate Access to Webapps", "url": "/posts/server-tomcat-04/", "categories": "Web, Web/Tomcat", "tags": "linux, tomcat, server, web, opengrok, authentication", "date": "2023-03-23 20:36:00 +0900", "snippet": "In the previous post, we set up the OpenGrok webapp in Tomcat. All we had to do to use the webapp was to type the address localhost:8080/source in a web browser.The current method of usage is simple and convenient, but it may raise some security issues when the need arises to share the sources with other people.There are many authentication methods that Tomcat provides to limit access to specific webapps. In this post, we will show you how to implement the BASIC authentication on OpenGrok webapp.Enabling the BASIC Authentication in OpenGrokEach webapp hosted on Tomcat has a directory in the tomcat/webapps directory. If you followed the previous post to set up OpenGrok, there will be a source folder in the above directory.We need to look for the web.xml file in the WEB-INF directory of the source folder:$ cd ~/tomcat/webapps$ vim source/WEB-INF/web.xml When opening the web.xml file with Vim, the screen may show no text at all. This is most likely due to file permission issues. Use sudo to open the file in that case.Navigate to the bottom of the web.xml file. We will be adding some elements here to enable authentication in OpenGrok.We first need to add a login-config element indicating the type of authentication to use:&amp;lt;web-app&amp;gt; ... &amp;lt;login-config&amp;gt; &amp;lt;auth-method&amp;gt;BASIC&amp;lt;/auth-method&amp;gt; &amp;lt;/login-config&amp;gt;&amp;lt;/web-app&amp;gt;We then need to add two security-constraint elements.One is for the /api/* url:&amp;lt;web-app&amp;gt; ... &amp;lt;/login-config&amp;gt; &amp;lt;security-constraint&amp;gt; &amp;lt;web-resource-collection&amp;gt; &amp;lt;web-resource-name&amp;gt;APIs&amp;lt;/web-resource-name&amp;gt; &amp;lt;url-pattern&amp;gt;/api/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/web-resource-collection&amp;gt; &amp;lt;/security-constraint&amp;gt;&amp;lt;/web-app&amp;gt;The second security-constraint is for the actual source files:&amp;lt;web-app&amp;gt; ... &amp;lt;/security-constraint&amp;gt; &amp;lt;security-constraint&amp;gt; &amp;lt;web-resource-collection&amp;gt; &amp;lt;web-resource-name&amp;gt;Protected source files&amp;lt;/web-resource-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;http-method&amp;gt;GET&amp;lt;/http-method&amp;gt; &amp;lt;http-method&amp;gt;POST&amp;lt;/http-method&amp;gt; &amp;lt;/web-resource-collection&amp;gt; &amp;lt;auth-constraint&amp;gt; &amp;lt;role-name&amp;gt;opengrok_user&amp;lt;/role-name&amp;gt; &amp;lt;/auth-constraint&amp;gt; &amp;lt;/security-constraint&amp;gt;&amp;lt;/web-app&amp;gt;The first security-constraint is only applied to OpenGrok APIs. We set no authentication constraint on the APIs, so we would not run into any permission problems when we are indexing the source files.The second security-constraint has the auth-constraint element set, with the role-name opengrok_user. This allows only users with the role opengrok_user to access the files. Notice that the authentication is applied for http method GET and POST, effectively blocking anyone without access from viewing the files.Adding Users with the opengrok_user Roles in TomcatWe now need to add some users with the role-name we defined for OpenGrok authentication.Open the tomcat-users.xml file:$ vim ~/tomcat/conf/tomcat-users.xmlDefine the role opengrok_user and add a user with that role:&amp;lt;tomcat-users&amp;gt; ... &amp;lt;role rolename=&quot;opengrok_user&quot;/&amp;gt; &amp;lt;user username=&quot;opengrok&quot; password=&quot;opengrok&quot; roles=&quot;opengrok_user&quot;/&amp;gt;&amp;lt;/tomcat-users&amp;gt;Take note of the username and password just added. These will be used to gain access to the OpenGrok webapp.Restart Tomcat:$ cd ~/tomcat/bin$ ./shutdown.sh$ ./startup.shLogging in with the Registered CredentialsGo to localhost:8080/source. The web page will now ask for a username and password before granting access. Enter the username and password that was added in the tomcat-users.xml file. The web browser may not ask for credentials but just display the error page. Try using a private mode to access the page instead.TroubleshootingTODO" }, { "title": "Tomcat [3] - OpenGrok", "url": "/posts/server-tomcat-03/", "categories": "Web, Web/Tomcat", "tags": "linux, tomcat, server, web, opengrok", "date": "2023-03-23 00:07:00 +0900", "snippet": "OpenGrokOpenGrok is a Java servlet application that indexes files and provides a convenient way to browse them. It is especially useful for viewing source files of a large project.PrerequisitesOpenJDK 11Tomcat 10Universal CtagsInstall Universal ctags from source:$ git clone https://github.com/universal-ctags/ctags.git$ cd ctags$ ./autogen$ ./configure$ make$ sudo make install If ./autogen ends with the message ‘No autotools (autoconf and automake) found’, install the required packages: sudo yum install autoconf automakeMake sure the installed ctags is the Universal ctags:$ ctags --versionUniversal Ctags 6.0.0 ....Downloading OpenGrok BinaryDownload the OpenGrok binary archive:$ wget https://github.com/oracle/opengrok/releases/download/1.9.2/opengrok-1.9.2.tar.gzInitializing OpenGrok DirectoryCreate an OpenGrok directory and its subdirectories:$ mkdir -p opengrok/{src,data,dist,etc,log}The resulting file structure should look like the following:$ tree opengrokopengrok|-- data|-- dist|-- etc|-- log|-- srcExtract the downloaded OpenGrok binary to opengrok/dist:$ tar -C ~/opengrok/dist --strip-components=1 -xzvf opengrok-1.9.2.tar.gz The strip-components option ensures that only the subdirectories of the opengrok-1.9.2 directory are extracted to the specified pathThe resulting file structure now should look like this:$ tree opengrok -L 2opengrok|-- data|-- dist| |-- doc| |-- lib| |-- share| |-- tools|-- etc|-- log|-- srcDeploying OpenGrok in TomcatThe .war file of each web application needs to be copied to the Tomcat webapps directory before it can be used.The source.war file of OpenGrok is located in opengrok/dist/lib directory.$ cp ~/opengrok/dist/lib/source.war ~/tomcat/webapps The webapps can be accessed using their .war file name. In the case of OpenGrok, access it via Tomcat with the following link: localhost:8080/sourceGo to localhost:8080/source in a web browser. The browser will show an error page saying that the configuration is missing. This is to be expected as no source files have been indexed yet.At this point, Tomcat should have extracted the source.war file and created a source directory in the webapp folder.Indexing FilesFirst, copy the default logging.properties file to the opengrok/etc folder:$ cp ~/opengrok/dist/doc/logging.properties ~/opengrok/etcCopy the source files that need to be indexed to the opengrok/src folder. Make sure to create a parent folder for each project. A valid file structure will look as the following:$ tree ~/opengrok/src~/opengrok/src/|-- sample_project/ |-- hello.c |-- hello2.c ...|-- sample_project2/...Then, run the indexer with the following command:$ java \\-Djava.util.logging.config.file=~/opengrok/etc/logging.properties \\-jar ~/opengrok/dist/lib/opengrok.jar \\-c /usr/local/bin/ctags \\-s ~/opengrok/src -d ~/opengrok/data -H -P -S -G \\-W ~/opengrok/etc/configuration.xml -U http://localhost:8080/sourceBrowse the source files for each project in localhost:8080/sourceTroubleshootingTODO" }, { "title": "Tomcat [2] - Accessing the Manager Web Application", "url": "/posts/server-tomcat-02/", "categories": "Web, Web/Tomcat", "tags": "linux, tomcat, server, web", "date": "2023-03-15 23:07:00 +0900", "snippet": "Accessing the Manager WebappBare Tomcat installation includes some basic web applications to help with the site management. The manager webapp will allow us to check the server status, deploy .war files and do other management activities via the web interface.After the initial installation, the two buttons Server Status and Manager App are displayed on the top right side of the Tomcat home page. However, clicking any of the two buttons will lead us to the 403 Access Denied page, denying us the right to use the manager webapp. The page displayed when Server Status is clicked may be different when accessing the Tomcat from the localhost: localhost:8080. If the proper user has not been set up, it will lead us to the 401 Unauthorized page.Tomcat includes some security measures to prevent anyone from easily accessing the manager webapp. To actually use the application, we have to enable a user with the role manager-gui.Creating a User with the manager_gui RoleOpen the tomcat-users.xml file located in the conf directory in your base Tomcat installation folder:$ cd ~/tomcat/apache-tomcat-10.1.7/conf$ vim tomcat-users.xmlAdd a user entry with the role manager-gui as the following:&amp;lt;tomcat-users ...&amp;gt; ... &amp;lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui&quot;/&amp;gt; ...&amp;lt;/tomcat-users&amp;gt; The username and password fields are used to gain access to the Manager Webapp. They can be set arbitrarily. However, make sure the roles field is set to manager-gui.Save the tomcat-users.xml file and restart Tomcat:$ cd ~/tomcat/apache-tomcat-10.1.7/bin$ ./startup.shGain Access to the Manager WebappOpen a Web browser and browse to the Tomcat homepage:localhost:8080Click Server Status button on top.When the browser asks for credentials, log in using the username and password set earlier.The manager webapp is now accessible.TroubleshootingTODO" }, { "title": "Tomcat [1] - Setting Up Tomcat", "url": "/posts/server-tomcat/", "categories": "Web, Web/Tomcat", "tags": "linux, tomcat, server, web", "date": "2023-03-14 22:38:00 +0900", "snippet": "TomcatInstalling Tomcat Server Go to the Tomcat website and download the Tomcat binary archive using the link provided in the web page. In this tutorial, we will install Tomcat 10.1.7: $ cd ~/archives $ wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.7/bin/apache-tomcat-10.1.7.tar.gz Check the Which version? page of Tomcat and take a note of the required Java version. For Tomcat 10.1.7, Java version 11 and later are supported. Check the installed Java version using java -version. If the JDK version requirement is not met, install the required Java version: $ java -version openjdk version &quot;1.8.0_362&quot; $ yum install java-11-openjdk-devel.x86_64 $ java -version openjdk version &quot;11.0.18&quot; If the java -version still shows the old version, configure the system to use the latest Java version with the command update-alternatives --config java. Extract the downloaded archive in step 1 to a directory. That directory will serve as the home of the Tomcat server: $ tar -xzvf apache-tomcat-10.1.7.tar.gz -C ~/tomcat Go to the bin directory under the extracted Tomcat directory and run startup.sh. The script will print some path configurations and the message Tomcat started. when the server has been successfully set up: $ cd ~/tomcat $ cd apache-tomcat-10.1.7 $ cd bin $ ./startup.sh Using CATALINA_BASE: /home/tomcat/apache-tomcat-10.1.7 Using CATALINA_HOME: /home/tomcat/apache-tomcat-10.1.7 Using CATALINA_TMPDIR: /home/tomcat/apache-tomcat-10.1.7/temp Using JRE_HOME: /usr/lib/jvm/java-11-openjdk-11.0.18.0.10-1.el7_9.x86_64 Using CLASSPATH: Using CATALINA_OPTS: Tomcat started. The path for JRE_HOME may show up empty. In that case, create the setenv.sh file in the bin directory and export the JRE_HOME variable with the correct path. The setenv.sh script will then be called by the catalina.sh script automatically on startup. For example: export JRE_HOME=/usr/lib/jvm/java-11-openjdk-11.0.18.0.10-1.el7_9.x86_64 Access the Tomcat server by navigating to the following address in a web browser: localhost:8080 If you are greeted by the Tomcat home page, then the installation is successful. TroubleshootingTODO" }, { "title": "[macos] Managing Brew Packages", "url": "/posts/macos-package-manager/", "categories": "macos, Brew", "tags": "macos, Brew, packages, guide", "date": "2022-09-03 21:47:00 +0900", "snippet": "TL;DR$ brew update$ brew outdated$ brew upgradeUpgrading Brew Packages Check installed Brew packages: $ brew list Update repository: $ brew update Check outdated packages: $ brew outdated Upgrade outdated packages: $ brew upgrade This process may take a while depending on the number of packages that need to be upgraded. Deleting Brew Packages TODO" }, { "title": "[Linux] Mail Service", "url": "/posts/linux-mail/", "categories": "Linux, Network", "tags": "Linux, guide", "date": "2022-09-01 01:57:00 +0900", "snippet": "Protocols Protocol Port Description SMTP(Simple Mail Transfer Protocol) 25 Used to send mails POP3(Post Office Protocol version 3) 110 Let mail clients read received mails. Read mails are automatically erased. IMAP(Internet Mail Access Protocol) 143 Read received mails. Does not erase read mails. Mail Programs Category Description Programs MTA(Mail Transfer Agent) A server program that sends mails using SMTP sendmail, qmail, postfix, MS Exchange Server MUA(Mail User Agent) A user program used to read and send mails kmail, evolution, mutt, thunderbird, MS Outlook MDA(Mail Delivery Agent)   procmail Mail ServerThis post assumes sendmail is used in the mail server.Configuration /etc/mail/sendmail.cf /etc/mail/local-host-names Sets the domain names used in the mail server. Specify one domain per line. Examples $ vi /etc/mail/local-host-names mail.org mail.co.kr linxm.com /etc/mail/sendmail.mc A configuration macro file for /etc/mail/sendmail.cf. Restore configuration with the following command: $ m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf /etc/mail/access Accepts/rejects specified hosts $ vi /etc/mail/access From:spam@gmail.com REJECT // Reject and send a message Connect:192.158.5 DISCARD // Reject without any messages Connect:127.0.0.5 OK // Allow Connect:heejoon.org RELAY // Allow access Run the following command to apply changes: $ makemap hash /etc/mail/access &amp;lt; /etc/mail/access /etc/aliases Forward mails sent for an accout to other accounts. Used to create a mailing list where a mail sent to a specific person will automatically be sent to other related personnel. $ vi /etc/aliases heejoon: hjwin, hjmac, hjlinux Run one of the following commands to apply changes: $ newaliases $ sendmail -bi $ sendmail -I /etc/mail/virtusertable Create a virtual user only used when specifying the mail recepient. Forward such mails to the actual intended user. $ vi /etc/mail/virtusertable ceo@linux.com heejoon ceo@windows.com bill Apply changes: $ makemap hash /etc/mail/virtusertable &amp;lt; /etc/mail/virtusertable ~/.forward Forward mails sent to a user to other users. The write permission of .forward file must be enabled only for the owner. $ vi .forward heejoon@naver.com heejoon@gmail.com $ chmod 0600 .forward " }, { "title": "[Linux] NFS", "url": "/posts/linux-nfs/", "categories": "Linux, Network", "tags": "Linux, guide", "date": "2022-09-01 00:20:00 +0900", "snippet": "NFS(Network File System)NFS was developed by Sun Microsystems in 1984. NFS is implemented using RPC(remote procedure call)(just as in NIS, which is another product of Sun Microsystems).Daemons Daemon Description rpcbind Remote procedure call daemon. Used to be portmap nfs-server NFS server daemon Server Configuration/etc/exports Usage: Directory_path Host(options) [Host(options) …]$ vi /etc/exports/nfsdata 192.168.5.13/nfsdata1 192.168.5.0/255.255.255.0(rw,root_squash) // Read write, map a client logging in as &#39;root&#39; to &#39;nobody&#39;/nfsdata2 192.168.12.0/24(rw,no_root_squash) // Allow &#39;root&#39; to stay as &#39;root&#39;/nfsdata3 *.domain.or.kr(rw,all_squash) // Map every account to &#39;nobody&#39;(including &#39;root&#39;)/home/heejoon mymachine(rw,all_squash,anonuid=500,anongid=500) // Map uid and gid to 500CommandsNFS Server exportfs Show exported(shared) directories in the server(/etc/exports content) showmount Show mounted clients showmount can also be used on NFS client to show the server’s exported directories: $ showmount -e server_host nfsstat Show NFS status. It can also be used in an NFS client. NFS Client mount.nfs Mount exported NFS server directory Usage: mount.nfs host_ip:dir mount_dir Examples $ mount.nfs 192.168.5.13:/nfsdata /mnt $ mount -t nfs 192.168.5.13:/nfsdata /mnt can also be used " }, { "title": "[Linux] SAMBA", "url": "/posts/linux-samba/", "categories": "Linux, Network", "tags": "Linux, guide", "date": "2022-08-31 23:04:00 +0900", "snippet": "SAMBASAMBA allows Unix and Windows systems to communicate with each other using the CIFS protocol.LicenseGPLDaemons Daemon Description smdb User authentication daemon nmdb WINS(Windows Internet Name Service) daemon Server Configuration/etc/samba/smb.conf$ vi /etc/samba/smb.conf[global] workgroup = SAMBA server string = Samba Server netbios name = MYSERVER // Name used to connect from Windows machine interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24 hosts allow = 127. 192.168.12. // Allowed IP of SMB client #hosts allow = 192.168.1. EXCEPT 192.168.1.220 // Allow all IPs in network 192.168.1. except for 192.168.1.220 #hosts allow = 192.168.1.0/255.255.255.0 // Network IPs can be set using netmask #hosts allow = heejoon_pc, hj_macbook // Specify using host name hosts deny = 192.168.0.4 // Block IPs security = user // User must specify username and password when connecting #security = share // No need to specify password[shared] # Disk name shown in Windows when connected comment = Shared directory path = /home/shared # Path to the Linux directory to be shared valid users = heejoon devel # Users who can access the directory writable = yes write list = heejoon @home # @ indicates a group nameCommandsClient Commands(Linux-&amp;gt;Windows) smbclient Usage: smbclient [option] [hostname] Hostname can be an IP address, or hostname(Linux)/machine name(Windows). A directory name can be specified after the hostname. Correct usage of / and \\: Windows-&amp;gt;Linux: \\\\192.168.12.22\\shared Linux-&amp;gt;Windows: //192.168.12.23/shared, \\\\\\\\192.168.12.23\\\\shared Options Option Description -L List all Samba directories -U Specify user name. Specify password using % Examples $ smbclient -L 203.247.40.248 List all shared directories in 203.247.40.248 $ smbclient \\\\\\\\hjwin\\\\shared -U heejoon Access shared directory in machine ‘hjwin’ using the user name ‘heejoon’ mount.cifs Usage: mount.cifs //server/dir /mount Mount a shared folder in Windows system to a directory in Linux system. Server Commands(Windows-&amp;gt;Linux) smbstatus Show client connections testparm Usage: testparm [file path] [hostname IP] Check the validity of the config file(By default, /etc/samba/smb.conf) smbpasswd Manage Samba users Usage: smbpasswd [option] [username] Options Description -a Add a Samba user. Must exist as a user in the system(/etc/passwd) -x Remove a Samba user -d Disable a Samba user -e Enable a disabled Samba user -n Allow login without password. Must also specify in /etc/samba/smb.conf ‘null passwords = yes’ Examples $ smbpasswd -a heejoon Add a Samba user heejoon. heejoon must also exist in /etc/passwd $ smbpasswd heejoon Change the password of the Samba user heejoon pdbedit Manage Samba users Usage: pdbedit [option] [username] Options Description -a Add a Samba user. Must exist as a user in the system -L List all Samba users -V Verbose " }, { "title": "[Linux] NIS", "url": "/posts/linux-nis/", "categories": "Linux, Network", "tags": "Linux, guide", "date": "2022-08-31 02:20:00 +0900", "snippet": "NIS(Network Information Service)NIS allows a single server to provide login information to other machines.SetupServer Required daemons: Daemon Description ypserv Main NIS server daemon yppasswdd Set password ypxfrd Improve mapping performance Start and enable daemons: $ systemctl start ypserv yppasswdd ypxfrd $ systemctl enable ypserv yppasswdd ypxfrd Set NIS domain name: Use nisdomainname: $ nisdomainname testdomain.co.kr Add NISDOMAIN to /etc/sysconfig/network: $ vi /etc/sysconfig/network NISDOMAIN=testdomain.co.kr Refresh info Whenever the NIS information is changed(a new user is added, …), recompilation is required. $ cd /var/yp ; make Example output: $ cd /var/yp ; make $ ls Makefile testdomain.co.kr $ ls testdomain.co.kr group.bygid mail.aliases protocols.byname services.byname hosts.byaddr passwd.byname Client Required packages: Package Description ypbind Main NIS client daemon yp-tools Tools for configuring NIS Set NIS domain: Use nisdomainname: $ nisdomainname testdomain.co.kr Add NISDOMAIN to /etc/sysconfig/network Set NIS server and domain in config file /etc/yp.conf: $ vi /etc/yp.conf server nis.testdomain.co.kr ypserver nis.testdomain.co.kr domain testdomain.co.kr Start daemons $ systemctl start ypbind $ systemctl enable ypbind Commands Command Description Usage nisdomainname Show/set NIS domain name $ nisdomainname → Show NIS domain $ nisdomainname test.or.kr → Set NIS domain to test.or.kr ypwhich NIS client. Show server name, map file names $ ypwhich → Show NIS server name $ ypwhich -m → Show NIS map file names ypcat NIS client. Check the content of NIS map files $ ypcat hosts.byname → Print hosts.byname NIS map file content yptest NIS client. Check NIS settings $ yptest yppasswd NIS client. Change password of a user $ yppasswd heejoon → Change the password of an NIS user heejoon ypchsh NIS client. Change the shell of a user $ ypchsh heejoon → Change the default shell of an NIS user heejoon ypchfn NIS client. Change the info of a user $ ypfn heejoon → Change the information of an NIS user heejoon " }, { "title": "[Linux] Communication Commands", "url": "/posts/linux-communication-cmds/", "categories": "Linux, Commands", "tags": "Linux, guide", "date": "2022-08-31 01:48:00 +0900", "snippet": " Command Description Usage write Send a message to a user $ write heejoon wall Send a message to all users $ wall &quot;Shutdown imminent&quot; mesg Check messages received via write $ mesg $ mesg n → Reject messages mail Send a mail to a user $ mail heejoon $ mail -s &quot;hello&quot; heejoon → Send a mail to heejoon and set the title to “hello” " }, { "title": "[Linux] GRUB", "url": "/posts/linux-grub/", "categories": "Linux, Bootloader", "tags": "Linux, guide", "date": "2022-08-31 01:38:00 +0900", "snippet": "GRUB(Grand Unified Bootloader)Configuration file File Description /boot/grub2/grub.cfg GRUB2 configuration script /etc/grub2.cfg Symbolic link to /boot/grub2/grub.cfg /etc/default/grub GRUB configuration file /etc/grub.d/00_header GRUB password configuration file After editing the content of the GRUB configuration file, run grub2-mkconfig to apply the changes: # grub2-mkconfig -o /boot/grub2/grub.cfg GRUB Configuration ExamplesGRUB timeout settingsSet GRUB timeout to 5 seconds:# vi /etc/default/grubGRUB_TIMEOUT=5Change terminal resolutionSet terminal resolution to 1024x768:# vi /etc/default/grubGRUB_CMDLINE_LINUX=&quot;rhgb quiet vga=791&quot;Set GRUB passwordAdd a user named heejoon and set a password:# vi /etc/grub.d/00_headercat &amp;lt;&amp;lt;EOFset superusers=&quot;heejoon&quot;password heejoon 1234EOF" }, { "title": "[WSL2] Reclaim Unused Disk Space", "url": "/posts/wsl2-reclaim-unused-disk-space/", "categories": "Tools, WSL2", "tags": "WSL2, Ubuntu, Linux, guide", "date": "2022-06-18 20:04:00 +0900", "snippet": "For each instance of WSL2, a hard disk image file (.vhdx) is created which acts as the main storage device for that instance.The file grows in size as new files are created in WSL2. However, the storage is never reclaimed(returned to Windows host) when the space is no longer in use by the WSL2 instance. For example, when you delete a file in WSL2, the file does not show up in the filesystem, but the .vhdx(in Windows host) file will not shrink in size.Thus, it is essential to manually reclaim such unused space once in a while, otherwise Windows host will eventually give you a warning that there is no storage space available when actually there is.Reclaim Unused Disk Space Open PowerShell and make sure the WSL2 instance using the storage you are reclaiming from is not running: &amp;gt; wsl --list --running Windows Subsystem for Linux Distributions: Ubuntu-22.04 &amp;gt; wsl --shutdown &amp;gt; wsl --list --running There are no running distributions. Locate the path of the .vhdx file that you are reclaming space from: The default location of the hard disk image file of a WSL2 instance is %PROFILE%\\AppData\\Local\\Packages\\CanonicalGroupLimited.[InstanceName]onWindows_79rhkp1fndgsc\\LocalState\\ext4.vhdx Run diskpart &amp;gt; diskpart Run the following commands in the diskpart cmd window that opens up: DISKPART&amp;gt; select vdisk file=&quot;[.vhdx path]&quot; DISKPART&amp;gt; attach vdisk readonly DISKPART&amp;gt; compact vdisk DISKPART&amp;gt; detach vdisk DISKPART&amp;gt; exit When step 4 is completed, the .vhdx file will have shrunken in size " }, { "title": "[WSL2] Installing Multiple Instances", "url": "/posts/wsl2-multiple-distro/", "categories": "Tools, WSL2", "tags": "WSL2, Ubuntu, Linux, guide", "date": "2022-05-22 03:51:00 +0900", "snippet": "WSL2 allows the user to install and manage multiple instances of Linux subsystems. This makes running programs that are dependent on a specific Ubuntu version much more manageable.Install an instance from Microsoft Store Open PowerShell and check currently installed instances: &amp;gt; wsl -l -v NAME STATE VERSION * Ubuntu Running 2 Ubuntu-16.04 Stopped 2 Ubuntu-22.04 Stopped 2 Check the distributions that you can install from Microsoft Store: &amp;gt; wsl --list --online NAME FRIENDLY NAME Ubuntu Ubuntu Debian Debian GNU/Linux kali-linux Kali Linux Rolling openSUSE-42 openSUSE Leap 42 SLES-12 SUSE Linux Enterprise Server v12 Ubuntu-16.04 Ubuntu 16.04 LTS Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Install the desired distribution with: wsl --install -d [distro name] For example, to install Ubuntu 18.04 LTS: &amp;gt; wsl --install -d Ubuntu-18.04 Follow the steps to finish installing your chosen distribution You may need to set up a username and password in this step. Confirm installed distributions: &amp;gt; wsl -l -v NAME STATE VERSION * Ubuntu Running 2 Ubuntu-16.04 Stopped 2 Ubuntu-18.04 Stopped 2 Ubuntu-22.04 Stopped 2 Install an instance from a local .tar file TODO" }, { "title": "Ubuntu Installation Guide", "url": "/posts/virtual-box-ubuntu/", "categories": "Tools, VirtualBox", "tags": "VirtualBox, Ubuntu, Linux, guide", "date": "2022-05-20 02:24:00 +0900", "snippet": "Prerequisites A host machine with VirtualBox installed: VirtualBox An Ubuntu image file: ubuntu-21.10Create an empty virtual machine Open Orcale VM VirtualBox From the top menu, click: Machine-&amp;gt;new Set up the new virtual machine: Specify a name for the machine Choose Linux for type and Ubuntu (64-bit) for version Set an adequate amount of memory size(over 2GB is recommended) Select create With the virtual machine just created highlighted, click Settings icon on the top right Click Storage on the left tab and add the downloaded Ubuntu image to Controller:IDE Install Ubuntu Choose your desired language and click Install Ubuntu Choose a language Choose your keyboard layout and click Continue Choose a keyboard layout Select Minimal Installation and check Download updates while installing Ubuntu. Click continue Updates and other software In Installation Type, select Erase disk and install Ubuntu. Click continue Installation type Choose your region Region Fill in all the fields and click conitnue Login info Wait for Ubuntu installation to finish(~10 min) Once the installation is finished, shut down the machine manually by File-&amp;gt;Close, then Power off machine Double click the virtual machine and wait for Ubuntu to boot Update package: $ sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y Install Virtual Box Guest Additions Install prerequisites: $ sudo apt -y install build-essential dkms Insert VBox Guest additions image from the top menu: Devices-&amp;gt;Inset Guest Additions CD image.. Mount Guest Additions image: $ sudo mount /dev/cdrom /mnt Run VBoxLinuxAdditions.run in the mounted directory: $ cd /mnt $ sudo ./VBoxLinuxAdditions.run Reboot the virtual machine Create a SnapshotCreate a snapshot of the Ubuntu setup just installed. This allows us to easily restore to the saved state in case of any critical errors. Save a snapshot: Machine -&amp;gt; Take a snapshot Specify a name and description for the snapshot The snapshot will appear in the window to the right: Restore to this snapshot in case of an error " }, { "title": "Template Page", "url": "/posts/sample/", "categories": "Template, Main", "tags": "template", "date": "2022-05-19 00:42:00 +0900", "snippet": "Use the examples generated below#include &amp;lt;stdio.h&amp;gt;int main(){ printf(&quot;Hello world\\n&quot;); return 0;}$ sudo apt update &amp;amp;&amp;amp; sudo apt upgradeprint(&quot;Hello world&quot;)Hello world" }, { "title": "ORB-SLAM 2 Test Run", "url": "/posts/orb-slam2_test_run/", "categories": "Computer Vision, SLAM", "tags": "computer vision, slam, orb-slam", "date": "2022-05-15 04:51:00 +0900", "snippet": "Prerequisites OpenCV Eigen3 Pangolin Xming(required only in WSL2)OpenCVref: https://linuxize.com/post/how-to-install-opencv-on-ubuntu-18-04/ Install dependencies: $ sudo apt install build-essential cmake git pkg-config libgtk-3-dev \\ libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \\ libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \\ gfortran openexr libatlas-base-dev python3-dev python3-numpy \\ libtbb2 libtbb-dev libdc1394-22-dev Create opencv directory and clone OpenCV and OpenCV_contrib repos: $ mkdir opencv &amp;amp;&amp;amp; cd opencvopencv$ git clone https://github.com/opencv/opencv.gitopencv$ git clone https://github.com/opencv/opencv_contrib.git Select required OpenCV version using git checkout. OpenCV 3.9.0 is selected for this installation: $ cd ~/opencv/opencvopencv/opencv$ git checkout 3.9.0$ cd ~/opencv/opencv_contribopencv/opencv_contrib$ git checkout 3.9.0 Create a build directory in opencv repo and run CMake: $ cd ~/opencv/opencvopencv/opencv$ mkdir build &amp;amp;&amp;amp; cd buildopencv/opencv/build$ cmake -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules .. Compile OpenCV: opencv/opencv/build$ make -j8 Install OpenCV: opencv/opencv/build$ sudo make install Eigen3$ sudo apt install libeigen3-devPangolin Clone Pangolin repository $ git clone --recursive https://github.com/stevenlovegrove/Pangolin.git$ cd Pangolin Install dependencies $ ./scripts/install_prerequisites.sh recommended Choose v0.5 branch using git checkout v0.5 $ git checkout v0.5 Any versions higher than v0.5 are not compatible with ORB-SLAM2 Configure and build $ cmake -B build$ cmake --build build XmingTODO: (https://evandde.github.io/wsl2-x/)ORB-SLAM 2 Clone ORB-SLAM 2 repository $ git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2 Run build.sh $ cd ORB_SLAM2$ ./build.sh ERRORSORB-SLAM 2 error: usleep is not declared in this scope Add #include &amp;lt;unistd.h&amp;gt; in include/System.h (ref: https://github.com/raulmur/ORB_SLAM2/issues/337) error: std::map must have the same value_type as its allocator Switch const and KeyFrame* in line 50 of include/LoopClosing.h: before Eigen::aligned_allocator&amp;lt;std::pair&amp;lt;const KeyFrame*, g2o::Sim3&amp;gt; &amp;gt; &amp;gt; KeyFrameAndPose; after Eigen::aligned_allocator&amp;lt;std::pair&amp;lt;KeyFrame* const, g2o::Sim3&amp;gt; &amp;gt; &amp;gt; KeyFrameAndPose; (ref: http://blog.leanote.com/post/gaunthan/ORB-SLAM2-compiling-problems) OpenCV &amp;gt; 2.4.3 not found. Install OpenCV Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) Install Eigen3 PangolinError Message: By not providing &quot;FindPangolin.cmake&quot; in CMAKE_MODULE_PATH this project has asked CMake to find a package configuration file provided by &quot;Pangolin&quot;, but CMake did not find one.Fix:Install PangolinPangolin fix reference: https://blog.csdn.net/Robert_Q/article/details/121690089Pangolin issues with X11: https://woojjang.tistory.com/52" }, { "title": "[Kernel DS] Tail Queue", "url": "/posts/tail-queue/", "categories": "Data Structure, Linux", "tags": "Linux, kernel, queue", "date": "2022-05-14 18:55:00 +0900", "snippet": "Header Filesys/queue.hTAILQ DefinitionsTAILQ_HEAD#define TAILQ_HEAD(name, type) \\struct name { \\ struct type *tqh_first; \\ struct type **tqh_last; \\}TAILQ_HEAD defines a struct that stores information about the head and tail of a queue. One thing to note in the kernel implementation of a queue is that the tqh_first variable stores the address of the first element as expected, but the tqh_last variable(notice that tqh_last is of type struct type **) actually stores the address of the last head variable which stores the address of the next element(NULL in this case).Such a structure is similarly used in TAILQ_ENTRY. Refer to the image below for clarification on how TAILQ structs are defined and used.TAILQ_ENTRY#define TAILQ_ENTRY(type) \\struct { \\ struct type *tqe_next; \\ struct type **tqe_prev; \\}Similar to the TAILQ_HEAD struct, TAILQ_ENTRY defines two variables: tqe_next stores the address of the next element, and tqe_prev holds the address of the tqe_next variable of the previous element.To use the kernel tail queue implementation in your code, TAILQ_ENTRY must be included in each element of your queue.type should be equal to the struct identifier of the element of the queue.TAILQ FunctionsTAILQ UsageFor this example, we will implement a queue whose elements contain information about a person.Each element will store a person struct defined as:struct person { char name[256]; int age;};To use the kernel tail queue implementation, a TAILQ_ENTRY should be defined along with the actual data inside each element. We will define an element struct as below:struct element { TAILQ_ENTRY(element) entry; struct person personal_data;};Test code:#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;sys/queue.h&amp;gt;TAILQ_HEAD(_head, element) tailq_head;int main(){ tailq_head head; struct element *e1, *e2, *e3; TAILQ_INIT(head); e1 = malloc(sizeof(struct element)); e2 = malloc(sizeof(struct element)); e3 = malloc(sizeof(struct element));}" }, { "title": "GitHub Pages Setup", "url": "/posts/github-pages-setup/", "categories": "Web, GitHub Pages", "tags": "github, blog, pages", "date": "2022-05-10 00:00:00 +0900", "snippet": "Download And Install Ruby Download Ruby source code: Ruby Extract the downloaded tarball: $ tar -xf ruby-3.1.2.tar.gz Update package list and install dependencies before building and installing Ruby: $ sudo apt-get update$ sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libdb-dev Build and install Ruby: $ cd ruby-3.1.2$ ./configure$ make$ sudo make install Step 4 will take around 10 minutes to complete Check your Ruby installation: $ ruby -vruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux] Install BundlerBundler is a package manager for Ruby. Bundler uses a file named Gemfile to manage and resolve dependencies between gems(Ruby packages). Install Bundler: $ sudo gem install bundler gem is the built-in package manager for Ruby. gem also refers to a Ruby package Check your Bundler installation: $ bundleCould not locate Gemfile Install Jekyll$ sudo apt install jekyllCreate a GitHub Pages Site Create a git repository with the following credentials: repository name: heejoonlee.github.io visibility: public Clone the GitHub Pages repo just created: $ git clone https://github.com/[username]/[username].github.io.git At the root of the repo, create a new Jekyll site: $ cd heejoonlee.github.io$ jekyll new --skip-bundle .New jekyll site installed in /home/heejoon/work/heejoonlee.github.io. Bundle install skipped. A Gemfile will be created at the root of the repo. Edit the Gemfile as follows: Comment the line that says gem &quot;jekyll&quot; Uncomment the line that says gem &quot;github-pages&quot; and add the latest supported version:ex) gem &quot;github-pages&quot;, &quot;~&amp;gt; 226&quot;, group: :jekyll_plugins Install gems from the Gemfile using bundler: $ bundle install Check your site locally: $ bundle exec jekyll serve Auto-regeneration: enabled for &#39;/home/heejoon/work/heejoonlee.github.io&#39; Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop. Go to http://127.0.0.1:4000/ in a web browser to check the generated site ERROR(Missing gem: webrick) $ bundle exec jekyll servebundler: failed to load command: jekyll (/usr/local/bin/jekyll)/usr/local/lib/ruby/gems/3.1.0/gems/jekyll-3.9.2/lib/jekyll/commands/serve/servlet.rb:3:in `require&#39;: cannot load such file -- webrick (LoadError) Resolve the error by adding gem &quot;webrick&quot; to Gemfile and running bundle install Add and commit the changes and push the commit to the remote repository: $ git add .$ git commit -m &quot;Initial commit&quot;$ git push Check your hosted web site at the address: https://heejoonlee.github.io/" } ]
